[{"D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\index.js":"1","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\App.js":"2","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\redux\\store.js":"3","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\redux\\reducers\\menuReducer.js":"4","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\redux\\reducers\\contentReducer.js":"5","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\Content.jsx":"6","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\Menu.jsx":"7","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\menuStep.jsx":"8","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\ContentItem.jsx":"9","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\MenuTheme.jsx":"10","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\Test.jsx":"11","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\TestItem.jsx":"12"},{"size":635,"mtime":1620834170934,"results":"13","hashOfConfig":"14"},{"size":939,"mtime":1620834170918,"results":"15","hashOfConfig":"14"},{"size":317,"mtime":1620834170941,"results":"16","hashOfConfig":"14"},{"size":3155,"mtime":1620834170940,"results":"17","hashOfConfig":"14"},{"size":2097,"mtime":1620834170939,"results":"18","hashOfConfig":"14"},{"size":2837,"mtime":1620834170934,"results":"19","hashOfConfig":"14"},{"size":7288,"mtime":1620834170935,"results":"20","hashOfConfig":"14"},{"size":2832,"mtime":1621160530567,"results":"21","hashOfConfig":"14"},{"size":6815,"mtime":1621101038248,"results":"22","hashOfConfig":"14"},{"size":1013,"mtime":1620834170936,"results":"23","hashOfConfig":"14"},{"size":1501,"mtime":1620834170937,"results":"24","hashOfConfig":"14"},{"size":1161,"mtime":1620834170938,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1yykz2",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\index.js",[],["54","55"],"D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\App.js",[],"D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\redux\\store.js",[],"D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\redux\\reducers\\menuReducer.js",[],"D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\redux\\reducers\\contentReducer.js",["56"],"// import data from \"../../content/theme1.json\";\r\n\r\nlet initialState = {\r\n  themes: {},\r\n  stateTest: {\r\n    checkAsk: [],\r\n    checkedId: [],\r\n    quantityQsn: 0,\r\n    btnFinishTest: true,\r\n    testResult: '',\r\n    ask: '',\r\n    isShowBigImg: false\r\n  },\r\n  pathImg: 'img/1.jpg',\r\n  preloaderStatus: ''\r\n}\r\n\r\nconst contentReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_ASK':\r\n      state.stateTest.ask = action.ask\r\n\r\n      if (state.stateTest.ask.includes('<s>'))\r\n        state.stateTest.checkAsk[action.name.replace('ask', '')] = true\r\n      else state.stateTest.checkAsk[action.name.replace('ask', '')] = false\r\n\r\n      state.stateTest.checkedId[action.name.replace('ask', '')] = action.id\r\n\r\n      state.stateTest.quantityQsn = action.qty\r\n\r\n      return state\r\n\r\n    case 'GIVE_RESULT_TEST':\r\n      let trueAsk = 0\r\n\r\n      state.stateTest.btnFinishTest = false\r\n\r\n      state.stateTest.checkAsk.forEach(ask => {\r\n        if (ask === true) trueAsk++\r\n      })\r\n\r\n      state.stateTest.testResult =\r\n        'правильных ответов: ' + trueAsk + ' из ' + state.stateTest.quantityQsn\r\n\r\n      state.stateTest.ask = ''\r\n      state.stateTest.checkedId = []\r\n\r\n      return state\r\n\r\n    case 'RESTART_TEST':\r\n      state.stateTest.testResult = ''\r\n      state.stateTest.checkAsk = []\r\n      state.stateTest.btnFinishTest = true\r\n      state.stateTest.checkedId = []\r\n\r\n      return state\r\n\r\n    case 'IMG_INCREASE_DISABLE':\r\n      state.isShowBigImg = false\r\n      return state\r\n\r\n    case 'IMG_INCREASE_SHOW':\r\n      state.isShowBigImg = true\r\n      state.pathImg = action.src\r\n      return state\r\n\r\n    case 'FILL_CONTENT':\r\n      function isEmptyObject(obj) {\r\n        for (var i in obj) {\r\n          if (obj.hasOwnProperty(i)) {\r\n            return false\r\n          }\r\n        }\r\n        return true\r\n      }\r\n\r\n      // if (isEmptyObject(state.themes)) {\r\n      state.themes = action.content\r\n      console.log('hello')\r\n      // }\r\n      return state\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default contentReducer\r\n","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\Content.jsx",[],"D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\Menu.jsx",[],"D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\menuStep.jsx",[],"D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\ContentItem.jsx",["57"],"import React from 'react'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport { Link, Route } from 'react-router-dom'\r\nimport Test from './Test'\r\n\r\nconst ContentItem = props => {\r\n  let key = 0\r\n  let imgId = 0\r\n  let idStep = 0\r\n  let showDeley = 0.3\r\n  let themeItem = Object.keys(props.theme)\r\n  let getStepNames = () => {\r\n    let stepNames = []\r\n    themeItem.forEach(item => {\r\n      if (!item.includes('test') && item !== 'icon') {\r\n        stepNames.push(item)\r\n      }\r\n    })\r\n    return stepNames\r\n  }\r\n\r\n  // функция для уникального key\r\n  let getKey = () => {\r\n    key++\r\n    return key\r\n  }\r\n\r\n  // dispatch функции\r\n  let imgIncreaseShow = event => {\r\n    props.dispatch({ type: 'IMG_INCREASE_SHOW', src: event.target.src })\r\n  }\r\n\r\n  // функция проверки наличия теста на странице\r\n  let checkTest = () => {\r\n    let isTest = false\r\n    themeItem.forEach(step => {\r\n      if (step.includes('test')) isTest = step\r\n    })\r\n    return isTest\r\n  }\r\n  // нарисовать кнопку тестов\r\n  let drowBtnTest = () => {\r\n    let testName = checkTest().replace('<test>', '')\r\n\r\n    return (\r\n      <div\r\n        key={getKey()}\r\n        style={animationIncrement()}\r\n        className=\"btn-test__wrapper\"\r\n      >\r\n        <Link\r\n          id=\"test\"\r\n          className=\"btn-test button\"\r\n          onClick={() => window.scrollTo(0, 0)}\r\n          to={'/' + props.themeName + '/test'}\r\n        >\r\n          тест {testName}\r\n        </Link>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // функция для садания анимации при появлении\r\n  let animationIncrement = () => {\r\n    let show = {\r\n      animation: 'fadeInUpBig',\r\n      animationDuration: showDeley + 's'\r\n    }\r\n    if (showDeley < .5) showDeley += 0.1\r\n    return show\r\n  }\r\n\r\n  // парсеры контента\r\n  let imgParse = str => {\r\n    const fs = window.require('fs')\r\n    const isDev = window.require('electron-is-dev')\r\n    const path = window.require('path')\r\n\r\n    imgId++\r\n    let size = ''\r\n    let sizeClassName = 'img__middle'\r\n    let imgLink = ''\r\n\r\n    if (str.includes('small') || str.includes('big')) {\r\n      if (str.includes('small')) size = 'small'\r\n      else size = 'big'\r\n\r\n      switch (size) {\r\n        case 'small':\r\n          sizeClassName = 'img__small'\r\n          break\r\n        case 'big':\r\n          sizeClassName = 'img__big'\r\n          break\r\n        default:\r\n          sizeClassName = 'img__middle'\r\n      }\r\n\r\n      imgLink = str.replace(size, '')\r\n    } else imgLink = str\r\n\r\n    let file_path = isDev\r\n      ? imgLink\r\n      : path.join(window.process.resourcesPath, 'public/' + imgLink)\r\n\r\n    return (\r\n      <div\r\n        key={getKey()}\r\n        style={animationIncrement()}\r\n        className={sizeClassName}\r\n      >\r\n        <img\r\n          onClick={imgIncreaseShow}\r\n          src={file_path}\r\n          id={'img' + imgId}\r\n          alt=\"картинка\"\r\n        ></img>\r\n      </div>\r\n    )\r\n  }\r\n  let linkParce = str => {\r\n    let res\r\n    let newStr = str.replace('<a', \"<a target='_blank'\")\r\n\r\n    if (str.includes('<s>')) {\r\n      res = (\r\n        <div\r\n          key={getKey()}\r\n          style={animationIncrement()}\r\n          className=\"selection-text\"\r\n        >\r\n          <p>{ReactHtmlParser(newStr.replace('<s>', ''))}</p>\r\n        </div>\r\n      )\r\n    } else\r\n      res = (\r\n        <p key={getKey()} style={animationIncrement()}>\r\n          {ReactHtmlParser(newStr)}\r\n        </p>\r\n      )\r\n\r\n    return res\r\n  }\r\n  let specialTextParse = str => {\r\n    return (\r\n      <div\r\n        key={getKey()}\r\n        style={animationIncrement()}\r\n        className=\"selection-text\"\r\n      >\r\n        <p>{str.replace('<s>', '')}</p>\r\n      </div>\r\n    )\r\n  }\r\n  let youtubeVideoParse = str => {\r\n    let link = ''\r\n    for (let i = str.indexOf('=') + 1; i < str.length; i++) {\r\n      link += str[i]\r\n    }\r\n    return (\r\n      <div\r\n        key={getKey()}\r\n        style={animationIncrement()}\r\n        className=\"youtube-video\"\r\n      >\r\n        <iframe\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          src={'https://www.youtube.com/embed/' + link}\r\n          title=\"YouTube video player\"\r\n          frameBorder=\"0\"\r\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n          allowFullScreen\r\n        ></iframe>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // разбивает данные разделов на html элементы\r\n  let stepItemsParse = stepName => {\r\n    let stepItems = []\r\n\r\n    props.theme[stepName].forEach(str => {\r\n      if (str.includes('img/')) {\r\n        stepItems.push(imgParse(str))\r\n      } else if (str.includes('<a') && str.includes('</a>')) {\r\n        stepItems.push(linkParce(str))\r\n      } else if (str.includes('<s>')) {\r\n        stepItems.push(specialTextParse(str))\r\n      } else if (str.includes('www.youtube.com/')) {\r\n        stepItems.push(youtubeVideoParse(str))\r\n      } else\r\n        stepItems.push(\r\n          <p key={getKey()} style={animationIncrement()}>\r\n            {str}\r\n          </p>\r\n        )\r\n    })\r\n\r\n    return stepItems\r\n  }\r\n  // разбивает входящие данные темы на разделы (content__item)\r\n  let contentParse = () => {\r\n    let res = []\r\n    getStepNames().forEach(stepName => {\r\n      let contentItems = []\r\n\r\n      contentItems.push(\r\n        <h2\r\n          style={animationIncrement()}\r\n          key={getKey()}\r\n          className=\"content__title\"\r\n        >\r\n          {stepName}\r\n        </h2>\r\n      )\r\n      contentItems.push(stepItemsParse(stepName))\r\n\r\n      res.push(\r\n        <div key={getKey()} id={idStep} className=\"content__item\">\r\n          {contentItems}\r\n          {/* <div className=\"bottom-indent\"></div> */}\r\n        </div>\r\n      )\r\n\r\n      contentItems = []\r\n      idStep++\r\n    })\r\n\r\n    if (checkTest()) {\r\n      res.push(drowBtnTest())\r\n    }\r\n\r\n    return res\r\n  }\r\n\r\n  // рисует содержимое контента в зависимости от содержания в ней теста\r\n  let drowContent = () => {\r\n    if (checkTest()) {\r\n      let res = []\r\n\r\n      res.push(\r\n        <Route\r\n          exact\r\n          path={'/' + props.themeName}\r\n          render={() => contentParse()}\r\n        />\r\n      )\r\n\r\n      res.push(\r\n        <Route\r\n          path={'/' + props.themeName + '/test'}\r\n          render={() => (\r\n            <Test\r\n              stateTest={props.stateTest}\r\n              dispatch={props.dispatch}\r\n              test={props.theme[checkTest()]}\r\n            />\r\n          )}\r\n        />\r\n      )\r\n\r\n      return res\r\n    } else return contentParse()\r\n  }\r\n\r\n  return <div className=\"container\">{drowContent()}</div>\r\n}\r\n\r\nexport default ContentItem\r\n","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\MenuTheme.jsx",["58"],"import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst MenuTheme = props => {\r\n  const { icon } = props\r\n  let drowIcon = () => {\r\n    const fs = window.require('fs')\r\n    const isDev = window.require('electron-is-dev')\r\n    const path = window.require('path')\r\n\r\n    let file_path = isDev\r\n      ? icon\r\n      : path.join(window.process.resourcesPath, 'public/' + icon)\r\n\r\n    if (icon !== '') {\r\n      return (\r\n        <div className=\"theme-icon\">\r\n          <img src={file_path} alt=\"иконка\" />\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div className=\"theme-icon\">\r\n          <p>{props.title[0]}</p>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NavLink\r\n      className=\"theme__item\"\r\n      onClick={() => {\r\n        window.scrollTo(0, 0)\r\n      }}\r\n      to={'/' + props.title}\r\n    >\r\n      {drowIcon()}\r\n\r\n      <span className=\"theme__name\">\r\n        <p>{props.title}</p>\r\n      </span>\r\n    </NavLink>\r\n  )\r\n}\r\n\r\nexport default MenuTheme\r\n","D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\Test.jsx",[],"D:\\Проги и Драва\\github\\jalsansarylov.github.io\\react\\react-electron-main\\src\\moduls\\TestItem.jsx",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":68,"column":16,"nodeType":"65","messageId":"66","endLine":68,"endColumn":29},{"ruleId":"63","severity":1,"message":"67","line":75,"column":11,"nodeType":"65","messageId":"66","endLine":75,"endColumn":13},{"ruleId":"63","severity":1,"message":"67","line":7,"column":11,"nodeType":"65","messageId":"66","endLine":7,"endColumn":13},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'isEmptyObject' is defined but never used.","Identifier","unusedVar","'fs' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]